---
// src/components/Modal.astro
interface Props {
  id: string;
  title: string;
  images: string[];
}

const { id, title, images } = Astro.props;
---

<div id={id} class="modal hidden fixed inset-0 z-50 flex items-center justify-center bg-black/80">
  <div class="modal-content bg-[#1E2028] rounded-lg max-w-4xl w-full mx-4 max-h-[90vh] overflow-auto">
    <div class="flex justify-between items-center p-4 border-b border-gray-700">
      <h3 class="text-xl font-bold text-gray-100">{title}</h3>
      <button class="close-modal text-gray-400 hover:text-white">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    <div class="p-4">
      <div class="grid grid-cols-1 gap-4">
        {images.map((image) => (
          <div class="relative aspect-video">
            <img src={image} alt={`${title} screenshot`} class="w-full h-full object-contain" />
          </div>
        ))}
      </div>
    </div>
  </div>
</div>

<style>
    .modal {
        transition: opacity 0.3s ease;
    }
    .modal.hidden {
        display: none;
    }
</style>

<script define:vars={{ id }}>
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById(id);
    const closeButton = modal.querySelector('.close-modal');

    // Close modal when clicking the close button
    closeButton.addEventListener('click', () => {
      modal.classList.add('hidden');
    });

    // Close modal when clicking outside the content
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.add('hidden');
      }
    });

    // Close modal with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
        modal.classList.add('hidden');
      }
    });
  });
</script>